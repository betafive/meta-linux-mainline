#! /usr/bin/env python3
# Copyright (C) 2021, meta-linux-mainline contributors
# SPDX-License-Identifier: MIT

import re
import subprocess
import sys
import textwrap
import urllib.request

if sys.version_info < (3, 7):
    print("ERROR: This script requires Python 3.7 or later!")
    sys.exit(1)

VMINOR_LIST = ((4, 14), (4, 19), (5, 4), (5, 10), (5, 15), (6, 1), (6, 5))

# Maps (vmajor, vminor) -> sha256
SHA256_TARBALLS = {}

# Maps (vmajor, vminor) -> (highest patch num, sha256)
SHA256_PATCHES = {}


def load_sha256sums(vmajor):
    f = urllib.request.urlopen(
        f"https://cdn.kernel.org/pub/linux/kernel/v{vmajor}.x/sha256sums.asc"
    )
    for line in f:
        line = line.decode("utf-8").strip()
        if (
            not line
            or line == "-----BEGIN PGP SIGNED MESSAGE-----"
            or line.startswith("Hash:")
        ):
            continue
        if line == "-----BEGIN PGP SIGNATURE-----":
            break
        sha256, fname = line.split()

        # Check if this a tarball from a mainline release
        m = re.fullmatch(rf"linux-{vmajor}\.(\d*)\.tar\.xz", fname)
        if m:
            vminor = int(m[1])
            vkey = (vmajor, vminor)
            SHA256_TARBALLS[vkey] = sha256
            continue

        # Check if this is a stable patch
        m = re.fullmatch(rf"patch-{vmajor}\.(\d*)\.(\d*)\.xz", fname)
        if m:
            vminor = int(m[1])
            vpatch = int(m[2])
            vkey = (vmajor, vminor)
            if vkey in SHA256_PATCHES:
                # Only update the entry if this is the highest numbered patch so far
                if vpatch < SHA256_PATCHES[vkey][0]:
                    continue
            SHA256_PATCHES[vkey] = (vpatch, sha256)


def update_stable_recipe(vmajor, vminor):
    vkey = (vmajor, vminor)
    sha256_tarball = SHA256_TARBALLS[vkey]
    vpatch, sha256_patch = SHA256_PATCHES[vkey]

    fname = f"recipes-kernel/linux/linux-stable_{vmajor}.{vminor}.bb"
    try:
        old_recipe = open(fname, "r").read()
        old_vpatch = int(re.search(r'LINUX_VPATCH = "(\d+)"', old_recipe)[1])
    except FileNotFoundError:
        old_vpatch = None
    if old_vpatch != vpatch:
        open(fname, "w").write(
            textwrap.dedent(
                f"""\
                # Copyright (C) 2021, meta-linux-mainline contributors (auto-generated file)
                # SPDX-License-Identifier: CC0-1.0
                LINUX_VMAJOR = "{vmajor}"
                LINUX_VMINOR = "{vminor}"
                LINUX_VPATCH = "{vpatch}"
                LINUX_SHA256_TARBALL = "{sha256_tarball}"
                LINUX_SHA256_PATCH = "{sha256_patch}"
                require linux-stable.inc
                """
            )
        )
        return vpatch
    else:
        return None


def update_mainline_recipe():
    # Parse git tags to find the latest
    p = subprocess.run(
        [
            "git",
            "ls-remote",
            "--tags",
            "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
        ],
        capture_output=True,
        check=True,
    )
    latest = (0, 0, 0)
    latest_srcrev = None
    for line in p.stdout.decode("utf-8").splitlines():
        version = None
        srcrev, ref = line.split()
        m = re.fullmatch(r"refs/tags/v(\d*)\.(\d*)\^{}", ref)
        if m:
            vmajor = int(m[1])
            vminor = int(m[2])
            version = (vmajor, vminor, 99)
        m = re.fullmatch(r"refs/tags/v(\d*)\.(\d*)-rc(\d*)\^{}", ref)
        if m:
            vmajor = int(m[1])
            vminor = int(m[2])
            vrc = int(m[3])
            version = (vmajor, vminor, vrc)

        if version and (version > latest):
            latest = version
            latest_srcrev = srcrev

    old_recipe = open("recipes-kernel/linux/linux-mainline.bb", "r").read()
    m = re.search(r'LINUX_VERSION = "(\d+)\.(\d+)(?:-rc(\d+))?"', old_recipe).groups()
    if m[2]:
        old_version = (int(m[0]), int(m[1]), int(m[2]))
    else:
        old_version = (int(m[0]), int(m[1]), 99)

    if old_version != latest:
        # Write the new recipe
        vmajor, vminor, vrc = latest
        version = f"{vmajor}.{vminor}"
        if vrc != 99:
            version += f"-rc{vrc}"

        open("recipes-kernel/linux/linux-mainline.bb", "w").write(
            textwrap.dedent(
                f"""\
                # Copyright (C) 2021, meta-linux-mainline contributors (auto-generated file)
                # SPDX-License-Identifier: CC0-1.0
                LINUX_VERSION = "{version}"
                SRCREV = "{latest_srcrev}"
                require linux-mainline.inc
                """
            )
        )
        return version
    else:
        return None


def commit_stable_kernels(versions):
    msg = "linux-stable: Uprev recipes\n\nNew kernel versions:\n\n"
    for vmajor, vminor, vpatch in versions:
        subprocess.run(
            ["git", "add", f"recipes-kernel/linux/linux-stable_{vmajor}.{vminor}.bb"],
            check=True,
        )
        msg += f"    * {vmajor}.{vminor}.{vpatch}\n"
    subprocess.run(
        ["git", "commit", "-s", "-F", "-"], input=msg.encode("utf-8"), check=True
    )


def commit_mainline_kernel(version):
    msg = f"linux-mainline: Uprev to {version}"
    subprocess.run(["git", "add", "recipes-kernel/linux/linux-mainline.bb"], check=True)
    subprocess.run(
        ["git", "commit", "-s", "-F", "-"], input=msg.encode("utf-8"), check=True
    )


def check_for_unstaged_changes():
    r = subprocess.run(["git", "diff-index", "--quiet", "HEAD"])
    if r.returncode:
        print("Error: Repository is not clean")
        sys.exit(1)


def main():
    for vmajor in set([vmajor for vmajor, _ in VMINOR_LIST]):
        load_sha256sums(vmajor)

    check_for_unstaged_changes()

    new_stable_kernels = []
    for vmajor, vminor in VMINOR_LIST:
        new_vpatch = update_stable_recipe(vmajor, vminor)
        if new_vpatch:
            new_stable_kernels.append([vmajor, vminor, new_vpatch])
    if new_stable_kernels:
        commit_stable_kernels(new_stable_kernels)

    new_mainline_kernel = update_mainline_recipe()
    if new_mainline_kernel:
        commit_mainline_kernel(new_mainline_kernel)

    print("Done.")


main()
