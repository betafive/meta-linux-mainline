#! /usr/bin/env python3
# Copyright (C) 2021, meta-linux-mainline contributors
# SPDX-License-Identifier: MIT

import sys

if sys.version_info < (3, 7):
    print("ERROR: This script requires Python 3.7 or later!")
    sys.exit(1)

import os
import re
import shutil
import subprocess
import tempfile
import textwrap
import urllib.request

TMPDIR = tempfile.TemporaryDirectory()


def load_sha256sums(vmajor, vminor, vpatch):
    path = os.path.join(TMPDIR.name, f"sha256sums-v{vmajor}.asc")
    if not os.path.exists(path):
        f_in = urllib.request.urlopen(
            f"https://cdn.kernel.org/pub/linux/kernel/v{vmajor}.x/sha256sums.asc"
        )
        f_out = open(path, "wb")
        shutil.copyfileobj(f_in, f_out)
        f_in.close()
        f_out.close()

    tarball_sha256sum = None
    patch_sha256sum = None
    tarball_pattern = re.compile(rf"([0-9a-f]*)\s+linux-{vmajor}.{vminor}.tar.xz")
    patch_pattern = re.compile(rf"([0-9a-f]*)\s+patch-{vmajor}.{vminor}.{vpatch}.xz")
    for line in open(path, "r"):
        line = line.strip()
        m = re.match(tarball_pattern, line)
        if m:
            tarball_sha256sum = m.group(1)
            continue
        m = re.match(patch_pattern, line)
        if m:
            patch_sha256sum = m.group(1)

    return tarball_sha256sum, patch_sha256sum


def update_mainline_recipe(version):
    old_recipe = open("recipes-kernel/linux/linux-mainline.bb", "r").read()
    old_version = re.search(r'LINUX_VERSION = "(.*)"', old_recipe)[1]

    print(f"mainline: {old_version} -> {version}")
    if old_version != version:
        # Get the srcrev
        p = subprocess.run(
            [
                "git",
                "ls-remote",
                "--tags",
                "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
                f"v{version}",
            ],
            capture_output=True,
            check=True,
        )
        srcrev = p.stdout.decode().split()[0]
        # print(f"mainline: Got srcrev {srcrev}")

        # Write the new recipe
        open("recipes-kernel/linux/linux-mainline.bb", "w").write(
            textwrap.dedent(
                f"""\
                # Copyright meta-linux-mainline contributors (auto-generated file)
                # SPDX-License-Identifier: CC0-1.0
                LINUX_VERSION = "{version}"
                SRCREV = "{srcrev}"
                require linux-mainline.inc
                """
            )
        )

        msg = f"linux-mainline: Uprev to {version}"
        subprocess.run(
            ["git", "add", "recipes-kernel/linux/linux-mainline.bb"], check=True
        )
        subprocess.run(
            ["git", "commit", "-s", "-F", "-"], input=msg.encode("utf-8"), check=True
        )


def update_stable_recipe(version):
    vsplit = version.split(".")
    if len(vsplit) != 3:
        print(f"{version}.y: Skipping mainline release")
        return

    vmajor, vminor, vpatch = int(vsplit[0]), int(vsplit[1]), int(vsplit[2])

    fname = f"recipes-kernel/linux/linux-stable_{vmajor}.{vminor}.bb"
    try:
        old_recipe = open(fname, "r").read()
        old_vpatch = int(re.search(r'LINUX_VPATCH = "(\d+)"', old_recipe)[1])
    except FileNotFoundError:
        old_vpatch = 0

    print(
        f"{vmajor}.{vminor}.y: {vmajor}.{vminor}.{old_vpatch} -> {vmajor}.{vminor}.{vpatch}"
    )
    if old_vpatch != vpatch:
        sha256_tarball, sha256_patch = load_sha256sums(vmajor, vminor, vpatch)
        if not sha256_tarball or not sha256_patch:
            print(f"Failed to get sha256sums for {version}")
            return

        # print(f"{vmajor}.{vminor}.y: Got tarball sha256sum {sha256_tarball}")
        # print(f"{vmajor}.{vminor}.y: Got patch sha256sum {sha256_patch}")
        open(fname, "w").write(
            textwrap.dedent(
                f"""\
                # Copyright meta-linux-mainline contributors (auto-generated file)
                # SPDX-License-Identifier: CC0-1.0
                LINUX_VMAJOR = "{vmajor}"
                LINUX_VMINOR = "{vminor}"
                LINUX_VPATCH = "{vpatch}"
                LINUX_SHA256_TARBALL = "{sha256_tarball}"
                LINUX_SHA256_PATCH = "{sha256_patch}"
                require linux-stable.inc
                """
            )
        )

        if old_vpatch:
            msg = f"linux-stable: Uprev {vmajor}.{vminor} recipe to v{vmajor}.{vminor}.{vpatch}"
        elif not vpatch:
            msg = f"linux-stable: Add {vmajor}.{vminor} recipe"
        else:
            msg = f"linux-stable: Add {vmajor}.{vminor} recipe at v{vmajor}.{vminor}.{vpatch}"
        subprocess.run(
            ["git", "add", f"recipes-kernel/linux/linux-stable_{vmajor}.{vminor}.bb"],
            check=True,
        )
        subprocess.run(
            ["git", "commit", "-s", "-F", "-"], input=msg.encode("utf-8"), check=True
        )


def update_recipes():
    mainline_version = None
    stable_versions = set()
    # next_version = None

    f = urllib.request.urlopen("https://www.kernel.org/finger_banner")
    for line in f:
        line = line.decode()
        if not line.startswith("The latest "):
            print(f"Unexpected line in finger banner: {line}")
            continue
        release_type = line.split()[2]
        version = line.split(":")[1].replace("(EOL)", "").strip()
        if release_type == "mainline":
            mainline_version = version
        if release_type in ("stable", "longterm"):
            stable_versions.add(version)
        # if release_type == "linux-next":
        #    next_version = version

    update_mainline_recipe(mainline_version)
    for version in stable_versions:
        update_stable_recipe(version)
    # TODO: update_next_recipe(next_version)


def check_for_unstaged_changes():
    r = subprocess.run(["git", "diff-index", "--quiet", "HEAD"])
    if r.returncode:
        print("Error: Repository is not clean")
        sys.exit(1)


def main():
    check_for_unstaged_changes()
    update_recipes()
    print("Done.")


main()
