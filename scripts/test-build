#! /bin/bash
# Copyright (C) 2020, meta-kernel contributors
# SPDX-License-Identifier: MIT

set -euo pipefail

usage() {
    echo "This script performs a test build using a kas configuration file."
    echo ""
    echo "Usage: $0 [-q] CONFIG"
    echo "    where CONFIG is the name of the build configuration file in the"
    echo "    'kas' directory to build."
    echo ""
    echo "    -q: Make bitbake output quieter to reduce size of test logs."
}

QUIET=no
if [ "$1" == "-q" ]; then
    QUIET=yes
    shift 1
fi

if [ "$1" == "--help" ]; then
    usage
    exit 0
fi

if [ $# != 1 ]; then
    echo "ERROR: Incorrect number of arguments provided!" > /dev/stderr
    usage > /dev/stderr
    exit 1
fi

CONFIG=$1

safe_build() {
    # If there are transfer errors when fetching sstate artifacts from our
    # mirror then this can cause bitbake to exit with an error. To work around
    # this we run setscene tasks separately and ignore errors. Any setscene
    # failure will be covered by running the appropriate tasks in the second
    # bitbake invocation where we don't ignroe errors.
    kas shell kas/${CONFIG}.yml -c 'bitbake --setscene-only core-image-base' || true
    kas shell kas/${CONFIG}.yml -c 'bitbake --skip-setscene core-image-base'
}

if [ "$QUIET" == "yes" ]; then
    safe_build | sed -e '/^NOTE: .*Started$/d' -e '/^NOTE: Running /d'
else
    safe_build
fi

mv build/tmp/deploy/images .
