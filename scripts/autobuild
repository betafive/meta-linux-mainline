#! /usr/bin/env python3
# Copyright (C) 2021, meta-linux-mainline contributors
# SPDX-License-Identifier: MIT

import argparse
import datetime
import os
import subprocess
import sys
import traceback

SOURCEPATH = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))


def pretty_timedelta(t):
    seconds = t.seconds % 60
    minutes = t.total_seconds() // 60
    hours = int(minutes // 60)
    minutes = int(minutes % 60)
    return f"{hours:02d}h {minutes:02d}m {seconds:02d}s"


class Build:
    def __init__(self, workdir, release, machine, kernel):
        self.release = release
        self.machine = machine
        self.kernel = kernel
        self.workdir = workdir
        self.builddir = os.path.join(self.workdir, "build")
        self.logdir = os.path.join(self.workdir, "logs")
        self.logpath = os.path.join(
            self.logdir, f"build_{self.release}_{self.machine}_{self.kernel}.log"
        )
        self.dl_dir = os.path.join(self.workdir, "downloads")
        self.sstate_dir = os.path.join(self.workdir, "sstate-cache")

    def clean(self):
        if os.path.exists(self.builddir):
            subprocess.run(["rm", "-rf", self.builddir])

    def build(self):
        os.makedirs(self.logdir, exist_ok=True)
        os.makedirs(self.dl_dir, exist_ok=True)
        os.makedirs(self.sstate_dir, exist_ok=True)

        kas_env = os.environ.copy()
        kas_env["KAS_WORK_DIR"] = self.workdir
        kas_env["KAS_BUILD_DIR"] = self.builddir
        kas_env["DL_DIR"] = self.dl_dir
        kas_env["SSTATE_DIR"] = self.sstate_dir

        kas_configs = [
            "build.yml",
            f"kas/release-{self.release}.yml",
            f"kas/machine-{self.machine}.yml",
            f"kas/kernel-{self.kernel}.yml",
        ]

        with open(self.logpath, "w") as f:
            try:
                subprocess.run(
                    [
                        "kas",
                        "build",
                        ":".join(kas_configs),
                    ],
                    check=True,
                    stdout=f,
                    stderr=f,
                    env=kas_env,
                )
            except subprocess.CalledProcessError:
                traceback.print_exc(file=f)
                return False
            return True

    def skip(self):
        if "riscv" in self.machine:
            if self.release == "dunfell":
                return True
            if self.kernel not in ("lts", "stable", "mainline"):
                kernel_version = tuple([int(s) for s in self.kernel.split(".")])
                if kernel_version < (5, 10):
                    return True
        return False

    def __call__(self, args):
        print(
            f"R={self.release} M={self.machine} K={self.kernel}".ljust(64),
            end="",
            flush=True,
        )
        if self.skip():
            print("  skipped", flush=True)
            result = True
        else:
            t_start = datetime.datetime.now()
            self.siteconf = args.siteconf
            self.clean()
            result = self.build()
            if result:
                print("✔ ", end="", flush=True)
            else:
                print("✖ ", end="", flush=True)
            t_stop = datetime.datetime.now()
            t_build = t_stop - t_start
            print(f"in {pretty_timedelta(t_build)}", flush=True)
        return result


class BuildSet:
    def __init__(self, releases, machines, kernels):
        self.releases = releases
        self.machines = machines
        self.kernels = kernels

    def __len__(self):
        return len(self.releases) * len(self.machines) * len(self.kernels)

    def __iter__(self):
        for release in self.releases:
            for machine in self.machines:
                for kernel in self.kernels:
                    yield Build(self.workdir, release, machine, kernel)

    def build(self, args):
        count = len(self)
        had_error = False
        print(f"Running {count} builds...")
        for i, build in enumerate(self):
            print(
                f"[{i+1:03d}/{count:03d}] ",
                end="",
                flush=True,
            )
            if not build(args):
                had_error = True

        if not had_error:
            print("All succeeded.")
            return True
        else:
            print("Failed!")
            return False

    def __call__(self, args):
        self.workdir = args.workdir
        return self.build(args)


BUILDSETS = {
    "default": BuildSet(
        releases=("kirkstone", "master"),
        machines=("qemux86-64", "qemuriscv64", "qemuarm64"),
        kernels=("lts", "stable", "mainline"),
    ),
    "quick": BuildSet(
        releases=("master",),
        machines=("qemux86-64",),
        kernels=("lts", "stable", "mainline"),
    ),
    "extended": BuildSet(
        releases=("dunfell", "kirkstone", "master"),
        machines=(
            "qemux86-64",
            "qemuarm64",
            "qemuriscv64",
            "qemux86",
            "qemuarm",
            "qemuriscv32",
        ),
        kernels=("5.10", "6.1", "lts", "stable", "mainline"),
    ),
    "all": BuildSet(
        releases=("dunfell", "kirkstone", "nanbield", "master"),
        machines=(
            "qemux86-64",
            "qemuarm64",
            "qemuriscv64",
            "qemux86",
            "qemuarm",
            "qemuriscv32",
        ),
        kernels=(
            "4.14",
            "4.19",
            "5.4",
            "5.10",
            "5.15",
            "6.1",
            "lts",
            "stable",
            "mainline",
        ),
    ),
    "riscv": BuildSet(
        releases=("kirkstone", "nanbield", "master"),
        machines=(
            "qemuriscv64",
            "qemuriscv32",
        ),
        kernels=(
            "6.1",
            "lts",
            "stable",
            "mainline",
        ),
    ),
}


def main():
    parser = argparse.ArgumentParser(
        description="meta-linux-mainline build script",
        epilog="Supported buildsets: " + ", ".join(BUILDSETS.keys()),
    )
    parser.add_argument(
        "-b", "--buildset", default="default", help="Select the set of builds to run"
    )
    parser.add_argument("-s", "--siteconf", help="Path to a local site.conf file")
    parser.add_argument(
        "-w", "--workdir", default=os.getcwd(), help="Path to build directory"
    )
    args = parser.parse_args()
    args.workdir = os.path.realpath(args.workdir)

    buildset = BUILDSETS[args.buildset]
    if buildset(args):
        sys.exit(0)
    else:
        sys.exit(1)


main()
