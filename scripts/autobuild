#! /usr/bin/env python3
# Copyright (C) 2021, meta-linux-mainline contributors
# SPDX-License-Identifier: MIT

import datetime
import os
import subprocess
import sys
import traceback

RELEASES = ["dunfell", "master"]
MACHINES = ["qemux86-64", "raspberrypi3"]
KERNELS = ["5.4", "lts", "stable", "mainline"]
SITE_CONF = "~/cache/site.conf"


def fetch_layers():
    os.makedirs("layers", exist_ok=True)
    fetch_one_layer("poky", "https://git.yoctoproject.org/git/poky")
    if any("raspberrypi" in s for s in MACHINES):
        fetch_one_layer(
            "meta-raspberrypi", "https://github.com/agherzan/meta-raspberrypi.git"
        )


def fetch_one_layer(name, url):
    gitdir = os.path.join("layers", f"{name}.git")
    if os.path.exists(gitdir):
        print(f"Updating {name}")
        subprocess.run(["git", "-C", gitdir, "fetch", "-q"], check=True)
    else:
        print(f"Cloning {name}")
        subprocess.run(["git", "clone", "-q", "--mirror", url, gitdir], check=True)


def checkout_layers(workdir, release):
    checkout_one_layer("poky", workdir, release)
    if any("raspberrypi" in s for s in MACHINES):
        checkout_one_layer("meta-raspberrypi", workdir, release)


def checkout_one_layer(name, workdir, release):
    gitdir = os.path.join("layers", f"{name}.git")
    checkoutdir = os.path.join(workdir, name)
    print(f"Checking out {name} for {release}")
    subprocess.run(
        ["git", "clone", "-q", "--shared", "-b", release, gitdir, checkoutdir],
        check=True,
    )


def write_conf(workdir, machine, kernel):
    confdir = os.path.join(workdir, f"build_{machine}_{kernel}", "conf")
    os.makedirs(confdir)
    if SITE_CONF:
        site_conf_path = os.path.expanduser(SITE_CONF)
        os.symlink(site_conf_path, os.path.join(confdir, "site.conf"))
    with open(os.path.join(confdir, "auto.conf"), "w") as f:
        f.write(f'MACHINE = "{machine}"\n')
        f.write(f"require conf/linux-mainline/bsp/{machine}.inc\n")
        if kernel not in ("lts", "stable", "mainline"):
            f.write(f'PREFERRED_VERSION_linux-stable = "{kernel}%"\n')
            kernel = "stable"
        f.write(f"require conf/linux-mainline/{kernel}.inc\n")
        f.write('INHERIT += "rm_work"\n')
    with open(os.path.join(confdir, "bblayers-auto.conf"), "w") as f:
        f.write('BBLAYERS += " \\\n')
        f.write(f"    {os.path.realpath('.')} \\\n")
        if "raspberrypi" in machine:
            f.write(f"    {os.path.join(workdir, 'meta-raspberrypi')} \\\n")
        f.write('"\n')


def build(workdir, machine, kernel):
    pokydir = os.path.realpath(os.path.join(workdir, "poky"))
    builddir = os.path.realpath(os.path.join(workdir, f"build_{machine}_{kernel}"))
    with open(os.path.join(builddir, "build.log"), "a") as f:
        try:
            subprocess.run(
                [
                    "./scripts/autobuild-wrapper",
                    pokydir,
                    builddir,
                    "bitbake",
                    "-k",
                    "core-image-base",
                ],
                check=True,
                stdout=f,
                stderr=f,
            )
        except subprocess.CalledProcessError:
            traceback.print_exc(file=f)
            return False
        return True


def pretty_timedelta(t):
    seconds = t.seconds % 60
    minutes = t.total_seconds() // 60
    hours = int(minutes // 60)
    minutes = int(minutes % 60)
    return f"{hours:02d}h {minutes:02d}m {seconds:02d}s"


def main():
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    buildpath = os.path.realpath(f"builds_{timestamp}")
    fetch_layers()
    for release in RELEASES:
        workdir = os.path.join(buildpath, release)
        checkout_layers(workdir, release)

    builds = []
    for release in RELEASES:
        for machine in MACHINES:
            for kernel in KERNELS:
                b = (release, machine, kernel)
                builds.append(b)

    count = len(builds)
    had_error = False
    print(f"Running {count} builds...")
    for i, b in enumerate(builds):
        t_start = datetime.datetime.now()
        release, machine, kernel = b
        workdir = os.path.join(buildpath, release)
        print(
            f"[{i+1:03d}/{count:03d}] R={release} M={machine} K={kernel}".ljust(64),
            end="",
            flush=True,
        )
        write_conf(workdir, machine, kernel)
        if build(workdir, machine, kernel):
            print("✔ ", end="", flush=True)
        else:
            had_error = True
            print("✖ ", end="", flush=True)
        t_stop = datetime.datetime.now()
        t_build = t_stop - t_start
        print(f"in {pretty_timedelta(t_build)}", flush=True)

    if not had_error:
        print("All succeeded.")
        sys.exit(0)
    else:
        print("Failed!")
        sys.exit(1)


main()
